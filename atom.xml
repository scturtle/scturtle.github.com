<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ScTurtle's Pool]]></title>
  <link href="http://scturtle.me/atom.xml" rel="self"/>
  <link href="http://scturtle.me/"/>
  <updated>2014-04-18T19:07:00</updated>
  <id>http://scturtle.me</id>
  
  <entry>
    <title type="html"><![CDATA[Genetic Algorithm and Image Evolution]]></title>
    <author> <name><![CDATA[scturtle]]></name> </author>
    <link href="http://scturtle.me/2014/0418-ga/"/>
    <updated>2014-04-18T18:00:00</updated>
    <id>http://scturtle.me/2014/0418-ga/</id>
    <content type="html"><![CDATA[
<p style='text-align: center;'>
<img src='/2014/0418-ga/img/head.png' style='block:inline'/>
<img src='/2014/0418-ga/img/result.bmp' style='block:inline'/>
</p>

<p>Recently, I find a <a href="http://multigrad.blogspot.hk/2014/04/math-evolution-and-dirty-tricks.html">blog</a> about how to use <a href="https://code.google.com/p/deap/">DEAP</a>,
a genetic programming library in Python,
to find the magic number in the famous <a href="http://en.wikipedia.org/wiki/Fast_inverse_square_root">fast inverse square root</a> algorithm.
It seems that genetic algorithm is not too difficult
and let's play it on an <a href="http://rogeralsing.com/2008/12/07/genetic-programming-evolution-of-mona-lisa/">old toy programming game</a>.</p>
<p>The purpose is to use a certain number of triangles to approximate an image.
A lot of works have been done on this in various programming languages.
But let's try it by hand and in Python.</p>
<p>The idea of genetic algorithm is repeatedly evolution on a population of DNA.
Good DNA are kept and used to generate the next generation through crossover and mutation.
In plain words, crossover is exchanging small parts between two DNA and mutation is random change on one DNA.</p>
<p>First, we need to import something:</p>
<div class="codehilite"><pre><span class="kn">from</span> <span class="nn">deap</span> <span class="kn">import</span> <span class="n">base</span><span class="p">,</span> <span class="n">creator</span><span class="p">,</span> <span class="n">tools</span><span class="p">,</span> <span class="n">algorithms</span>
<span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">ImageDraw</span>
<span class="o">...</span>
</pre></div>


<p>Let's fix some constants.
The size of image is restricted to be 100x100.
Each generation contains a population of 40 individuals.
And the DNA of each individual is just a set of 50 triangles.</p>
<div class="codehilite"><pre><span class="n">PIC</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s">&#39;head.jpg&#39;</span><span class="p">)</span>
<span class="n">SIZE</span> <span class="o">=</span> <span class="mi">100</span>
<span class="n">NUMBER_OF_TRIANGLES</span> <span class="o">=</span> <span class="mi">50</span>
<span class="n">POPULATION</span> <span class="o">=</span> <span class="mi">40</span>
<span class="n">NGEN</span> <span class="o">=</span> <span class="mi">10000</span>
<span class="n">POLY</span> <span class="o">=</span> <span class="mi">3</span>
</pre></div>


<p>We need <code>gen_one_triangle()</code> to generate one triangle in random position with random color and transparency.</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">gen_one_triangle</span><span class="p">():</span>
    <span class="k">return</span> <span class="p">(</span><span class="nb">tuple</span><span class="p">([(</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">SIZE</span><span class="p">),</span> <span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">SIZE</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">POLY</span><span class="p">)]),</span>
            <span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">),</span> <span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">),</span> <span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">),</span> <span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">30</span><span class="p">))</span>
</pre></div>


<p>With DEAP, we define some classes and the initial part:</p>
<div class="codehilite"><pre><span class="n">creator</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;Fitness&quot;</span><span class="p">,</span> <span class="n">base</span><span class="o">.</span><span class="n">Fitness</span><span class="p">,</span> <span class="n">weights</span><span class="o">=</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,))</span>  <span class="c"># maximize fitness</span>
<span class="n">creator</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;Individual&quot;</span><span class="p">,</span> <span class="nb">list</span><span class="p">,</span> <span class="n">fitness</span><span class="o">=</span><span class="n">creator</span><span class="o">.</span><span class="n">Fitness</span><span class="p">)</span>  <span class="c"># individual class</span>

<span class="n">toolbox</span> <span class="o">=</span> <span class="n">base</span><span class="o">.</span><span class="n">Toolbox</span><span class="p">()</span>
<span class="n">toolbox</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="s">&quot;attr&quot;</span><span class="p">,</span> <span class="n">gen_one_triangle</span><span class="p">)</span>  <span class="c"># the above function</span>
<span class="n">toolbox</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="s">&quot;individual&quot;</span><span class="p">,</span> <span class="n">tools</span><span class="o">.</span><span class="n">initRepeat</span><span class="p">,</span>  <span class="c"># initialization of individual</span>
                 <span class="n">creator</span><span class="o">.</span><span class="n">Individual</span><span class="p">,</span> <span class="n">toolbox</span><span class="o">.</span><span class="n">attr</span><span class="p">,</span> <span class="n">NUMBER_OF_TRIANGLES</span><span class="p">)</span>
<span class="n">toolbox</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="s">&quot;population&quot;</span><span class="p">,</span> <span class="n">tools</span><span class="o">.</span><span class="n">initRepeat</span><span class="p">,</span>  <span class="c"># initialization of population</span>
                 <span class="nb">list</span><span class="p">,</span> <span class="n">toolbox</span><span class="o">.</span><span class="n">individual</span><span class="p">)</span>
</pre></div>


<p>Now we should figure out how to evaluate the intermediate result (50 triangles). I draw them on an blank background and do pixel by pixel comparison with the origin image:</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">triangles_to_image</span><span class="p">(</span><span class="n">triangles</span><span class="p">):</span>
    <span class="n">im</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s">&#39;RGB&#39;</span><span class="p">,</span> <span class="p">(</span><span class="n">SIZE</span><span class="p">,</span> <span class="n">SIZE</span><span class="p">),</span> <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">tri</span> <span class="ow">in</span> <span class="n">triangles</span><span class="p">:</span>
        <span class="n">mask</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s">&#39;RGBA&#39;</span><span class="p">,</span> <span class="p">(</span><span class="n">SIZE</span><span class="p">,</span> <span class="n">SIZE</span><span class="p">))</span>
        <span class="n">draw</span> <span class="o">=</span> <span class="n">ImageDraw</span><span class="o">.</span><span class="n">Draw</span><span class="p">(</span><span class="n">mask</span><span class="p">)</span>
        <span class="n">draw</span><span class="o">.</span><span class="n">polygon</span><span class="p">(</span><span class="n">tri</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">fill</span><span class="o">=</span><span class="n">tri</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>
        <span class="n">im</span><span class="o">.</span><span class="n">paste</span><span class="p">(</span><span class="n">mask</span><span class="p">,</span> <span class="n">mask</span><span class="o">=</span><span class="n">mask</span><span class="p">)</span>
        <span class="k">del</span> <span class="n">mask</span><span class="p">,</span> <span class="n">draw</span>
    <span class="k">return</span> <span class="n">im</span>

<span class="k">def</span> <span class="nf">evaluate</span><span class="p">(</span><span class="n">im1</span><span class="p">,</span> <span class="n">t2</span><span class="p">):</span>
    <span class="n">im2</span> <span class="o">=</span> <span class="n">triangles_to_image</span><span class="p">(</span><span class="n">t2</span><span class="p">)</span>
    <span class="n">pix1</span><span class="p">,</span> <span class="n">pix2</span> <span class="o">=</span> <span class="n">im1</span><span class="o">.</span><span class="n">load</span><span class="p">(),</span> <span class="n">im2</span><span class="o">.</span><span class="n">load</span><span class="p">()</span>
    <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">SIZE</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">SIZE</span><span class="p">):</span>
            <span class="n">a1</span><span class="p">,</span> <span class="n">a2</span><span class="p">,</span> <span class="n">a3</span> <span class="o">=</span> <span class="n">pix1</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span>
            <span class="n">b1</span><span class="p">,</span> <span class="n">b2</span><span class="p">,</span> <span class="n">b3</span> <span class="o">=</span> <span class="n">pix2</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span>
            <span class="n">ans</span> <span class="o">+=</span> <span class="p">(</span><span class="n">a1</span> <span class="o">-</span> <span class="n">b1</span><span class="p">)</span> <span class="o">**</span> <span class="mi">2</span> <span class="o">+</span> <span class="p">(</span><span class="n">a2</span> <span class="o">-</span> <span class="n">b2</span><span class="p">)</span> <span class="o">**</span> <span class="mi">2</span> <span class="o">+</span> <span class="p">(</span><span class="n">a3</span> <span class="o">-</span> <span class="n">b3</span><span class="p">)</span> <span class="o">**</span> <span class="mi">2</span>
    <span class="k">return</span> <span class="mi">1</span> <span class="o">-</span> <span class="p">(</span><span class="mf">1.</span> <span class="o">*</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">ans</span><span class="p">)</span> <span class="o">/</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">SIZE</span> <span class="o">*</span> <span class="n">SIZE</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">*</span> <span class="mi">255</span> <span class="o">*</span> <span class="mi">255</span><span class="p">)),</span>

<span class="n">toolbox</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="s">&quot;evaluate&quot;</span><span class="p">,</span> <span class="n">partial</span><span class="p">(</span><span class="n">evaluate</span><span class="p">,</span> <span class="n">PIC</span><span class="p">))</span>
</pre></div>


<p>For crossover we use the default function in DEAP to work on sequences.
And we define a <code>mutate</code> function to change position or color of one triangle in individual.
(That function is a bit long and boring. Let's skip it ...)
We also use the default select function in DEAP.
Register them:</p>
<div class="codehilite"><pre><span class="n">toolbox</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="s">&quot;evaluate&quot;</span><span class="p">,</span> <span class="n">partial</span><span class="p">(</span><span class="n">evaluate</span><span class="p">,</span> <span class="n">PIC</span><span class="p">))</span>
<span class="n">toolbox</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="s">&quot;mate&quot;</span><span class="p">,</span> <span class="n">tools</span><span class="o">.</span><span class="n">cxTwoPoint</span><span class="p">)</span>  <span class="c"># crossover</span>
<span class="n">toolbox</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="s">&quot;mutate&quot;</span><span class="p">,</span> <span class="n">mutate</span><span class="p">)</span>  <span class="c"># mutation</span>
<span class="n">toolbox</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="s">&quot;select&quot;</span><span class="p">,</span> <span class="n">tools</span><span class="o">.</span><span class="n">selTournament</span><span class="p">,</span> <span class="n">tournsize</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
</pre></div>


<p>Finally, in the <code>main</code> function we just call the algorithm function in one line.</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">pop</span> <span class="o">=</span> <span class="n">toolbox</span><span class="o">.</span><span class="n">population</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="n">POPULATION</span><span class="p">)</span>
    <span class="n">hof</span> <span class="o">=</span> <span class="n">tools</span><span class="o">.</span><span class="n">HallOfFame</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

    <span class="n">stats</span> <span class="o">=</span> <span class="n">tools</span><span class="o">.</span><span class="n">Statistics</span><span class="p">(</span><span class="k">lambda</span> <span class="n">ind</span><span class="p">:</span> <span class="n">ind</span><span class="o">.</span><span class="n">fitness</span><span class="o">.</span><span class="n">values</span><span class="p">)</span>
    <span class="n">stats</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="s">&quot;std&quot;</span><span class="p">,</span> <span class="n">numpy</span><span class="o">.</span><span class="n">std</span><span class="p">)</span>
    <span class="n">stats</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="s">&quot;max&quot;</span><span class="p">,</span> <span class="n">numpy</span><span class="o">.</span><span class="n">max</span><span class="p">)</span>
    <span class="n">stats</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="s">&quot;avg&quot;</span><span class="p">,</span> <span class="n">numpy</span><span class="o">.</span><span class="n">mean</span><span class="p">)</span>
    <span class="n">stats</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="s">&quot;min&quot;</span><span class="p">,</span> <span class="n">numpy</span><span class="o">.</span><span class="n">min</span><span class="p">)</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="n">pop</span><span class="p">,</span> <span class="n">log</span> <span class="o">=</span> <span class="n">algorithms</span><span class="o">.</span><span class="n">eaSimple</span><span class="p">(</span>
            <span class="n">pop</span><span class="p">,</span> <span class="n">toolbox</span><span class="p">,</span> <span class="n">cxpb</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">mutpb</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span> <span class="n">ngen</span><span class="o">=</span><span class="n">NGEN</span><span class="p">,</span> <span class="n">stats</span><span class="o">=</span><span class="n">stats</span><span class="p">,</span>
            <span class="n">halloffame</span><span class="o">=</span><span class="n">hof</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="k">finally</span><span class="p">:</span>
        <span class="nb">open</span><span class="p">(</span><span class="s">&#39;result.txt&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="nb">repr</span><span class="p">(</span><span class="n">hof</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
        <span class="n">triangles_to_image</span><span class="p">(</span><span class="n">hof</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s">&#39;result.bmp&#39;</span><span class="p">)</span>
</pre></div>


<p>The picture in the head of this blog is generated through 10,000 generations within sevaral hours.  <br />
The full source code is <a href="https://gist.github.com/scturtle/11035675">here</a>.
Feel free to play with it.</p>
]]> </content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Test IPython Notebook]]></title>
    <author> <name><![CDATA[scturtle]]></name> </author>
    <link href="http://scturtle.me/2014/0211-test-ipynb/"/>
    <updated>2014-02-11T17:00:00</updated>
    <id>http://scturtle.me/2014/0211-test-ipynb/</id>
    <content type="html"><![CDATA[
<div class="ipynb">

<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In&nbsp;[1]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight"><pre><span class="o">%</span><span class="k">pylab</span> <span class="n">inline</span>
<span class="o">%</span><span class="k">load_ext</span> <span class="n">sympy</span><span class="o">.</span><span class="n">interactive</span><span class="o">.</span><span class="n">ipythonprinting</span>
<span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">division</span></pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt"></div>
<div class="output_subarea output_stream output_stdout output_text">
<pre>

Welcome to pylab, a matplotlib-based Python environment [backend: module://IPython.zmq.pylab.backend_inline].
For more information, type &apos;help(pylab)&apos;.
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h1 id="calculator">calculator</h1>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In&nbsp;[2]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight"><pre><span class="kn">from</span> <span class="nn">sympy</span> <span class="kn">import</span> <span class="n">Rational</span>
<span class="n">a</span> <span class="o">=</span> <span class="n">Rational</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
<span class="kn">from</span> <span class="nn">sympy</span> <span class="kn">import</span> <span class="n">pi</span><span class="p">,</span> <span class="n">E</span><span class="p">,</span> <span class="n">oo</span></pre></div>

</div>
</div>
</div>

</div>
                symbols
                
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In&nbsp;[3]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight"><pre><span class="kn">from</span> <span class="nn">sympy</span> <span class="kn">import</span> <span class="n">Symbol</span><span class="p">,</span> <span class="n">symbols</span><span class="p">,</span> <span class="n">var</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">Symbol</span><span class="p">(</span><span class="s">&#39;x&#39;</span><span class="p">)</span>
<span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span> <span class="o">=</span> <span class="n">symbols</span><span class="p">(</span><span class="s">&#39;x,y,z&#39;</span><span class="p">)</span></pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>many symbols such as <code>alpha,beta,delta,gamma,mu,lambda,phi,sigma,theta</code> are in</p>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In&nbsp;[4]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight"><pre><span class="kn">from</span> <span class="nn">sympy.abc</span> <span class="kn">import</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span></pre></div>

</div>
</div>
</div>

</div>
                expression operations
                
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In&nbsp;[5]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight"><pre><span class="p">((</span><span class="n">x</span><span class="o">+</span><span class="n">y</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">expand</span><span class="p">()</span></pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">
    Out[5]:</div>


<div class="output_latex output_subarea output_pyout">
$$x^{2} + 2 x y + y^{2}$$
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In&nbsp;[6]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight"><pre><span class="p">((</span><span class="n">x</span><span class="o">+</span><span class="n">y</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">subs</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span></pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">
    Out[6]:</div>


<div class="output_latex output_subarea output_pyout">
$$\left(y + 1\right)^{2}$$
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>complex number</p>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In&nbsp;[7]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight"><pre><span class="kn">from</span> <span class="nn">sympy</span> <span class="kn">import</span> <span class="n">I</span>
<span class="n">I</span><span class="o">*</span><span class="n">I</span></pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">
    Out[7]:</div>


<div class="output_latex output_subarea output_pyout">
$$-1$$
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h1 id="algebra">Algebra</h1>
</div>
</div>
</div>
                partial fraction decomposition and together back
                
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In&nbsp;[8]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight"><pre><span class="kn">from</span> <span class="nn">sympy</span> <span class="kn">import</span> <span class="n">apart</span><span class="p">,</span> <span class="n">together</span>
<span class="n">apart</span><span class="p">((</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="n">x</span><span class="p">)</span></pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">
    Out[8]:</div>


<div class="output_latex output_subarea output_pyout">
$$1 + \frac{2}{x -1}$$
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In&nbsp;[9]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight"><pre><span class="n">together</span><span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span></pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">
    Out[9]:</div>


<div class="output_latex output_subarea output_pyout">
$$\frac{x + 1}{x -1}$$
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h1 id="calculus">Calculus</h1>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In&nbsp;[10]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight"><pre><span class="kn">from</span> <span class="nn">sympy</span> <span class="kn">import</span> <span class="n">limit</span><span class="p">,</span> <span class="n">sin</span>
<span class="n">limit</span><span class="p">((</span><span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="n">x</span><span class="o">+</span><span class="mi">10</span><span class="p">),</span> <span class="n">x</span><span class="p">,</span> <span class="n">oo</span><span class="p">)</span></pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">
    Out[10]:</div>


<div class="output_latex output_subarea output_pyout">
$$2$$
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In&nbsp;[11]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight"><pre><span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">.</span><span class="n">series</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span></pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">
    Out[11]:</div>


<div class="output_latex output_subarea output_pyout">
$$x - \frac{1}{6} x^{3} + \frac{1}{120} x^{5} - \frac{1}{5040} x^{7} + \frac{1}{362880} x^{9} + \mathcal{O}\left(x^{10}\right)$$
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In&nbsp;[12]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight"><pre><span class="kn">from</span> <span class="nn">sympy</span> <span class="kn">import</span> <span class="n">summation</span><span class="p">,</span> <span class="n">factorial</span>
<span class="n">summation</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="n">factorial</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">oo</span><span class="p">))</span></pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">
    Out[12]:</div>


<div class="output_latex output_subarea output_pyout">
$$e$$
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="diff">diff</h3>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In&nbsp;[13]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight"><pre><span class="kn">from</span> <span class="nn">sympy</span> <span class="kn">import</span> <span class="n">diff</span>
<span class="n">diff</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="p">),</span><span class="n">x</span><span class="p">)</span></pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">
    Out[13]:</div>


<div class="output_latex output_subarea output_pyout">
$$\cos{\left (x \right )}$$
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In&nbsp;[14]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight"><pre><span class="n">diff</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="p">),</span><span class="n">x</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span></pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">
    Out[14]:</div>


<div class="output_latex output_subarea output_pyout">
$$- \sin{\left (x \right )}$$
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="integration">integration</h3>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In&nbsp;[15]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight"><pre><span class="kn">from</span> <span class="nn">sympy</span> <span class="kn">import</span> <span class="n">integrate</span><span class="p">,</span> <span class="n">erf</span>
<span class="n">integrate</span><span class="p">(</span><span class="mi">6</span><span class="o">*</span><span class="n">x</span><span class="o">**</span><span class="mi">5</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span></pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">
    Out[15]:</div>


<div class="output_latex output_subarea output_pyout">
$$x^{6}$$
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In&nbsp;[16]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight"><pre><span class="n">integrate</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">pi</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span></pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">
    Out[16]:</div>


<div class="output_latex output_subarea output_pyout">
$$1$$
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h1 id="functions">functions</h1>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In&nbsp;[17]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight"><pre><span class="kn">from</span> <span class="nn">sympy</span> <span class="kn">import</span> <span class="n">Function</span>
<span class="n">f</span><span class="o">=</span><span class="n">Function</span><span class="p">(</span><span class="s">&#39;f&#39;</span><span class="p">)</span>
<span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">.</span><span class="n">diff</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span></pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">
    Out[17]:</div>


<div class="output_latex output_subarea output_pyout">
$$\frac{\partial^{2}}{\partial^{2} x}  \operatorname{f}{\left (x \right )}$$
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In&nbsp;[18]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight"><pre><span class="kn">from</span> <span class="nn">sympy</span> <span class="kn">import</span> <span class="n">solve</span>
<span class="n">solve</span><span class="p">([</span><span class="n">x</span> <span class="o">+</span> <span class="mi">5</span><span class="o">*</span><span class="n">y</span> <span class="o">-</span> <span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span><span class="o">*</span><span class="n">x</span> <span class="o">+</span> <span class="mi">6</span><span class="o">*</span><span class="n">y</span> <span class="o">-</span> <span class="mi">15</span><span class="p">],</span> <span class="p">[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">])</span></pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">
    Out[18]:</div>


<div class="output_text output_subarea output_pyout">
<pre>
{x: -3, y: 1}</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h1 id="linear-algebra">Linear Algebra</h1>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In&nbsp;[19]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight"><pre><span class="kn">from</span> <span class="nn">sympy</span> <span class="kn">import</span> <span class="n">Matrix</span>
<span class="n">Matrix</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]])</span></pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">
    Out[19]:</div>


<div class="output_latex output_subarea output_pyout">
$$\left[\begin{smallmatrix}1 & 0\\0 & 1\end{smallmatrix}\right]$$
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h1 id="pattern-matching">Pattern matching</h1>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In&nbsp;[20]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight"><pre><span class="kn">from</span> <span class="nn">sympy</span> <span class="kn">import</span> <span class="n">Wild</span>
<span class="n">p</span> <span class="o">=</span> <span class="n">Wild</span><span class="p">(</span><span class="s">&#39;p&#39;</span><span class="p">)</span>
<span class="p">(</span><span class="mi">5</span><span class="o">*</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">p</span><span class="o">*</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span></pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">
    Out[20]:</div>


<div class="output_text output_subarea output_pyout">
<pre>
{p: 5}</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h1 id="pretty-printing">Pretty printing</h1>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In&nbsp;[21]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight"><pre><span class="kn">from</span> <span class="nn">sympy</span> <span class="kn">import</span> <span class="n">pprint</span><span class="p">,</span> <span class="n">Integral</span>
<span class="n">pprint</span><span class="p">(</span><span class="n">Integral</span><span class="p">(</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="n">x</span><span class="p">))</span></pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt"></div>
<div class="output_subarea output_stream output_stdout output_text">
<pre>
⌠      
⎮  2   
⎮ x  dx
⌡      
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In&nbsp;[22]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight"><pre><span class="kn">from</span> <span class="nn">sympy.printing.python</span> <span class="kn">import</span> <span class="n">python</span>
<span class="k">print</span> <span class="n">python</span><span class="p">(</span><span class="n">Integral</span><span class="p">(</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="n">x</span><span class="p">))</span></pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt"></div>
<div class="output_subarea output_stream output_stdout output_text">
<pre>
x = Symbol(&apos;x&apos;)
e = Integral(x**2, x)
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In&nbsp;[23]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight"><pre><span class="kn">from</span> <span class="nn">sympy</span> <span class="kn">import</span> <span class="n">latex</span>
<span class="k">print</span> <span class="n">latex</span><span class="p">(</span><span class="n">Integral</span><span class="p">(</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="n">x</span><span class="p">))</span></pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt"></div>
<div class="output_subarea output_stream output_stdout output_text">
<pre>
\int x^{2}\, dx
</pre>
</div>
</div>

</div>
</div>

</div>
</div>
]]> </content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Parallel in Python]]></title>
    <author> <name><![CDATA[scturtle]]></name> </author>
    <link href="http://scturtle.me/2014/0111-parallel-in-python/"/>
    <updated>2014-01-11T10:00:00</updated>
    <id>http://scturtle.me/2014/0111-parallel-in-python/</id>
    <content type="html"><![CDATA[
<p>Multithreading and multiprocessing can be very easy in python ! <br />
Following tests are processed on a machine with 24 cores.</p>
<p>The original program:</p>
<div class="codehilite"><pre><span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">factorial</span>
<span class="k">print</span> <span class="nb">sum</span><span class="p">(</span><span class="n">factorial</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">%</span><span class="mi">1000</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">6000</span><span class="p">))</span> <span class="o">%</span> <span class="mi">1000</span>

<span class="c"># $ time pypy test.py</span>
<span class="c"># 314</span>
<span class="c"># </span>
<span class="c"># real    0m18.202s</span>
<span class="c"># user    0m18.099s</span>
<span class="c"># sys     0m0.057s</span>
</pre></div>


<p>With <a href="http://docs.python.org/2/library/multiprocessing.html"><code>multiprocessing</code></a>
:</p>
<div class="codehilite"><pre><span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">factorial</span>
<span class="kn">from</span> <span class="nn">multiprocessing</span> <span class="kn">import</span> <span class="n">Pool</span>
<span class="c"># from multiprocessing.dummy import Pool  # but using threads</span>

<span class="n">pool</span> <span class="o">=</span> <span class="n">Pool</span><span class="p">()</span>
<span class="k">print</span> <span class="nb">sum</span><span class="p">(</span><span class="n">pool</span><span class="o">.</span><span class="n">imap_unordered</span><span class="p">(</span><span class="k">lambda</span> <span class="n">n</span><span class="p">:</span> <span class="n">factorial</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="o">%</span><span class="mi">1000</span><span class="p">,</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">6000</span><span class="p">)))</span> <span class="o">%</span> <span class="mi">1000</span>

<span class="n">pool</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
<span class="n">pool</span><span class="o">.</span><span class="n">join</span><span class="p">()</span>

<span class="c"># $ time pypy test2.py</span>
<span class="c"># 314</span>
<span class="c"># </span>
<span class="c"># real    0m5.545s</span>
<span class="c"># user    0m41.953s</span>
<span class="c"># sys     0m0.986s</span>
</pre></div>


<p>With <a href="http://docs.python.org/3.4/library/concurrent.futures.html"><code>concurrent.futures</code></a> (<a href="https://pypi.python.org/pypi/futures">Backport in 2.7</a>):</p>
<div class="codehilite"><pre><span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">factorial</span>
<span class="kn">import</span> <span class="nn">futures</span>  <span class="c"># &lt;= 2.7</span>
<span class="c"># from concurrent import futures  # &gt;= 3.2</span>

<span class="c"># with futures.ThreadPoolExecutor() as executor:</span>
<span class="k">with</span> <span class="n">futures</span><span class="o">.</span><span class="n">ProcessPoolExecutor</span><span class="p">()</span> <span class="k">as</span> <span class="n">executor</span><span class="p">:</span>
    <span class="k">print</span> <span class="nb">sum</span><span class="p">(</span><span class="n">executor</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">n</span><span class="p">:</span> <span class="n">factorial</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="o">%</span><span class="mi">1000</span><span class="p">,</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">6000</span><span class="p">)))</span> <span class="o">%</span> <span class="mi">1000</span>

<span class="c"># $ time pypy test3.py</span>
<span class="c"># 314</span>
<span class="c"># </span>
<span class="c"># real    0m6.804s</span>
<span class="c"># user    0m45.791s</span>
<span class="c"># sys     0m1.409s</span>
</pre></div>
]]> </content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Python 字符串格式化详参]]></title>
    <author> <name><![CDATA[scturtle]]></name> </author>
    <link href="http://scturtle.me/2013/1219-string-format-python/"/>
    <updated>2013-12-19T18:00:00</updated>
    <id>http://scturtle.me/2013/1219-string-format-python/</id>
    <content type="html"><![CDATA[
<p><a href="http://docs.python.org/dev/library/string.html#formatspec">来源docs</a></p>
<p><code>{}</code> 包裹的是替换域，<code>{{</code> 和 <code>}}</code> 可用来 escape。</p>
<p>语法</p>
<div class="codehilite"><pre>替换域 ::=  &quot;{&quot; [域名] [&quot;!&quot; 转换] [&quot;:&quot; 格式] &quot;}&quot;
域名   ::=  参数名 (&quot;.&quot; 属性名 | &quot;[&quot; 索引 &quot;]&quot;)*
参数名 ::=  [关键字 | 数字]
属性名 ::=  关键字
索引   ::=  数字 | 索引字符串
索引   ::=  &lt;任何字符除了 &quot;]&quot;&gt; +
转换   ::=  &quot;r&quot; | &quot;s&quot; | &quot;a&quot;
格式   ::=  &lt;如下介绍&gt;
</pre></div>


<p>参数名要么是关键字（keyword=“...”）要么是数字（标识第几个参数，3.1中默认可忽略）。
参数名后可加 <code>.属性名</code>（<code>getattr()</code>）或 <code>[索引]</code>（<code>__getitem__()</code>）。</p>
<p>转换域进行格式化之前的强制类型转换（而不是默认的<code>__format__()</code>）。<code>!s</code> 调用 <code>str()</code>，<code>!r</code> 调用 <code>repr()</code>，<code>!a</code> 调用 <code>ascii()</code>。</p>
<p>格式域控制字段宽度，对齐，填充，小数精度等。依据是每种类型自己定义的<code>微语言</code>。格式域可嵌套但只能包含域名。大多数内置类型支持默认的微语言：</p>
<div class="codehilite"><pre>格式 ::=  [[fill]align][sign][#][0][width][,][.precision][type]
fill     ::=  &lt;填充字符除了 &#39;{&#39; or &#39;}&#39;&gt;
align ::=  &quot;&lt;&quot; | &quot;&gt;&quot; | &quot;=&quot; | &quot;^&quot;
sign  ::=  &quot;+&quot; | &quot;-&quot; | &quot; &quot;
width ::=  integer
precision ::=  integer
type ::=  &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;E&quot; | &quot;f&quot; | &quot;F&quot; | &quot;g&quot; | &quot;G&quot; | &quot;n&quot; | &quot;o&quot; | &quot;s&quot; | &quot;x&quot; | &quot;X&quot; | &quot;%&quot;
</pre></div>


<p>align：左对齐，右对齐，填充符号和数字间，居中。</p>
<p>sign：正数前+负数前-，正数前无负数前-，正数前空格负数前-。</p>
<p>#：整数、浮点数、复数和 Decimal 使用<code>替代格式</code>。比如整数在用十六进制输出时添加<code>0x</code>前缀。</p>
<p>width：前导<code>0</code>则相当于<code>fill='0' &amp; align='='</code>。</p>
<p>,：数字自动添加千分号。</p>
<p>precision：和<code>type = "f" | "F" | "g" | "G"</code>控制浮点精度，或表示最大域空间。</p>
<p>type：二进制，字符，十进制，科学计数，科学计数大写，定点，定点(NAN, INF)，
<em>标准格式（太长）</em>，标准格式大写，<em>数字</em>，八进制，十六进制，十六进制大写，百分比。
不写的话整数十进制，浮点数差不多是标准格式。</p>
]]> </content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Average Running Time of Quicksort]]></title>
    <author> <name><![CDATA[scturtle]]></name> </author>
    <link href="http://scturtle.me/2013/1109-quicksort/"/>
    <updated>2013-11-09T20:00:00</updated>
    <id>http://scturtle.me/2013/1109-quicksort/</id>
    <content type="html"><![CDATA[
<p>From an interesting <a href="http://aofa.cs.princeton.edu/lectures/lectures13/AA01-AofA.pdf">slide</a>.</p>
<p>We denote <mathjax>$C_N$</mathjax> as the <em>expected</em> number of comparisons used by sorting an array of length <mathjax>$N$</mathjax>.
The recursive formula is like this:
<mathjax>$$C_N = (N+1) + \sum_{1\leq k \leq N} \frac 1N (C_{k-1}+C_{N-k})$$</mathjax></p>
<p>which <mathjax>$N+1$</mathjax> is the comparisons needed for partitioning, 
and then plus <mathjax>$N$</mathjax> ways of partitioning with equal probability.
Also we have <mathjax>$C_0 = 0$</mathjax>. </p>
<p>Noticing the symmetric parttern in the sum part, we get:
<mathjax>$$C_N = (N+1) + \frac 2N \sum_{1\leq k \leq N} C_{k-1}$$</mathjax>
then
<mathjax>$$NC_N = N(N+1) + 2 \sum_{1\leq k \leq N} C_{k-1}$$</mathjax></p>
<p>Time to high school math. First, we write down same formula for N-1:
<mathjax>$$(N-1)C_{N-1} = (N-1)N + 2 \sum_{1\leq k \leq N-1} C_{k-1}$$</mathjax></p>
<p>Then we subtract the above two equations to get:
<mathjax>$$NC_N - (N-1)C_{N-1} = 2N + 2C_{N-1}$$</mathjax>
<mathjax>$$NC_N = (N+1)C_{N-1} + 2N$$</mathjax></p>
<p>Key and tricky step, divide both side by <mathjax>$N(N+1)$</mathjax>:
<mathjax>$$\frac{C_N}{N+1} = \frac{C_{N-1}}{N} + \frac{2}{N+1}$$</mathjax></p>
<p>Expand the right part to the end of the world:
<mathjax>$$\begin{split}
\frac{C_N}{N+1} &amp;= \frac{C_{N-1}}{N} + \frac 2{N+1} \\
&amp;= \frac{C_{N-2}}{N-1} + \frac 2N + \frac 2{N+1} \\
&amp;= C_0 + \frac 22 + \frac 23 + \dots + \frac 2N + \frac 2{N+1}
\end{split}$$</mathjax></p>
<p>Ignore small items:
<mathjax>$$c_N \sim 2N \sum_{1 \leq k \leq N} \frac 1k - 2N$$</mathjax></p>
<p>Finally, use the magic <a href="http://en.wikipedia.org/wiki/Euler%E2%80%93Mascheroni_constant"><code>Euler constant</code></a> <mathjax>$\gamma$</mathjax>:
<mathjax>$$\begin{split}
c_N &amp;\sim 2N (\int_1^\infty \frac 1x \mathrm{d} x + \gamma) - 2N \\
&amp;=2N \ln N - 2(1-\gamma)N
\end{split}$$</mathjax></p>
<p>It's <mathjax>$O(N \log N)$</mathjax>.</p>
]]> </content>
  </entry>
  <entry>
    <title type="html"><![CDATA[One Punch Man]]></title>
    <author> <name><![CDATA[scturtle]]></name> </author>
    <link href="http://scturtle.me/2013/1028-one-punch-man/"/>
    <updated>2013-10-28T00:00:00</updated>
    <id>http://scturtle.me/2013/1028-one-punch-man/</id>
    <content type="html"><![CDATA[
<p><img alt="one punch man" src="http://i.imgur.com/9oBxUQc.jpg" /></p>
<p>继上半年看完了《二十世纪少年》后，最近补完了漫画《一拳超人》的重制版，又把原作版也追到最新了。很久没有看到这么喜欢的漫画了。各种随随便便又颠覆传统的设定，再加上主角那超像麻仓叶的吊儿郎当的个性，真是让我爱不释手啊。</p>
<p>在<a href="http://www.mh5.tw/comic/9758/61242/p/20">番外篇2</a>中有这么一幕小女孩和主角的对话。其中几句有些感触：</p>
<p>「当我在你这个年纪我也很怕这个世界， <br />
即便到现在对我来说生活也没有变得更好」 <br />
「但你很强，光头」 <br />
「不管你强还是弱」   </p>
<p>不管你强还是弱，可能像<a href="http://www.hecaitou.com/blogs/hecaitou/archives/134603.aspx">和菜头</a>先生说的那样，一种可以对生活应付裕如的心态从来不存在。没有人容易。但是在艰难之中依然步履不停，依然可以因种种小快乐欣喜，依然愿意去分担另一个人的不易，可能是我目前觉得最好的状态了。</p>
<p>于是借和菜头那篇的最后的句式，也对自己说一句：   </p>
<p>生日快乐！scturtle 君！</p>
]]> </content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Compile a better GVim for Windows]]></title>
    <author> <name><![CDATA[scturtle]]></name> </author>
    <link href="http://scturtle.me/2013/0716-compile-vim/"/>
    <updated>2013-07-16T22:00:00</updated>
    <id>http://scturtle.me/2013/0716-compile-vim/</id>
    <content type="html"><![CDATA[
<p>GVim in the default distribution is ugly on Windows. 
It's not hard to build a better one.</p>
<p><em>1.</em> Get the source of Vim:</p>
<div class="codehilite"><pre>&gt; hg clone https://vim.googlecode.com/hg/ vim
</pre></div>


<p><em>2.</em> To get better font renderer, comment out these lines in <code>src/gui_w32.c</code>:</p>
<div class="codehilite"><pre>......
    /* On NT, tell the font renderer not to &quot;help&quot; us with Hebrew and Arabic
     * text.  This doesn&#39;t work in 9x, so we have to deal with it manually on
     * those systems. */
<span class="gi">+   /*</span>
    if (os_version.dwPlatformId == VER_PLATFORM_WIN32_NT)
        foptions |= ETO_IGNORELANGUAGE;
<span class="gi">+   */</span>
......
</pre></div>


<p><em>3.</em> To support non-monospace fonts, comment out these lines in <code>src/os_mswin.c</code>:</p>
<div class="codehilite"><pre>......
 #ifndef FEAT_PROPORTIONAL_FONTS
    /* Ignore non-monospace fonts without further ado */
<span class="gi">+   /*</span>
    if ((ntm-&gt;tmPitchAndFamily &amp; 1) != 0)
        return 1;
<span class="gi">+   */</span>
 #endif
......
</pre></div>


<p><em>4.</em> Get this <a href="http://tuxproject.de/projects/vim/_compile.bat.php">compile.bat</a>, 
and modify compilation flags as follows(assuming you have Virsual Studio):</p>
<div class="codehilite"><pre>......
nmake -f Make_mvc.mak GUI=yes OLE=yes IME=yes GIME=yes DYNAMIC_IME=yes GDYNAMIC_IME=yes CSCOPE=yes MULTI_BYTE=yes MULTI_BYTE_IME=yes FEATURES=HUGE PYTHON=c:\Python27 DYNAMIC_PYTHON=yes PYTHON_VER=27
......
</pre></div>


<p><em>5.</em> Run it at the <code>vim</code> folder, 
and you will get a new distribution of vim at <code>src\templateoutput</code>.
Move it to a suitable place, and run <code>install.exe</code> in it to do further configuration.
Done!</p>
]]> </content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Snake AI in python]]></title>
    <author> <name><![CDATA[scturtle]]></name> </author>
    <link href="http://scturtle.me/2013/0531-snake/"/>
    <updated>2013-05-31T14:00:00</updated>
    <id>http://scturtle.me/2013/0531-snake/</id>
    <content type="html"><![CDATA[
<p>Simple snake AI demo in python and pygame.
Inspired by <a href="http://hawstein.com/posts/snake-ai.html">this blog</a>.
Code is <a href="https://gist.github.com/scturtle/5678355">here</a>.</p>
<p><img alt="snake.gif" src="http://dl.dropboxusercontent.com/u/1551217/share/snake.gif" /></p>
]]> </content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Turtlenote]]></title>
    <author> <name><![CDATA[scturtle]]></name> </author>
    <link href="http://scturtle.me/2013/0426-turtlenote/"/>
    <updated>2013-04-26T15:00:00</updated>
    <id>http://scturtle.me/2013/0426-turtlenote/</id>
    <content type="html"><![CDATA[
<p>An online markdown editor (in JS) supporting vi-mode key binding, code highlighting and tex formula.</p>
<p><a href="http://scturtle.me/turtlenote/"><img alt="screenshort" src="http://i.imgur.com/E6Ar5bs.png" /></a></p>
]]> </content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Random Sampling]]></title>
    <author> <name><![CDATA[scturtle]]></name> </author>
    <link href="http://scturtle.me/2013/0417-random-sampling/"/>
    <updated>2013-04-17T19:00:00</updated>
    <id>http://scturtle.me/2013/0417-random-sampling/</id>
    <content type="html"><![CDATA[
<p>Given a set of items, choosing random one with equal probability can be done by <code>random.choice(items)</code>.
But what if we are given items one by one without knowing the length of the whole set?</p>
<p>There is a simple algorithm: For the <mathjax>$k$</mathjax>-th item, we give up previous selection and choose this one with probability <mathjax>$\frac 1 k$</mathjax>.
Proof as follows: If we select the <mathjax>$k$</mathjax>-th item, it means that we choose it with probability <mathjax>$\frac 1 k$</mathjax> and give up all successors. 
Product of probabilities of all these choices is:</p>
<p><mathjax>$$ p_k = \frac 1 k \times \frac {k} {k+1} \times \cdots \times \frac {n-2}{n-1} \times \frac {n-1} n = \frac 1 n $$</mathjax></p>
<p>Codes in Python:</p>
<div class="codehilite"><pre><span class="kn">import</span> <span class="nn">random</span>

<span class="k">def</span> <span class="nf">choice</span><span class="p">(</span><span class="n">items</span><span class="p">):</span>
    <span class="n">selection</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">item</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">items</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">selection</span> <span class="o">=</span> <span class="n">item</span>
    <span class="k">return</span> <span class="n">selection</span>
</pre></div>


<p>We can generalize this algorithm. For a set of items, each one is associated with a weight <mathjax>$w_i$</mathjax>.
Our goal is to select a random one based on its weight ratio.
The algorithm is similar to the previous one: For the <mathjax>$k$</mathjax>-th item, replace the current selection with it with probability <mathjax>$\frac {w_k} {\sum_{i=1}^k w_i}$</mathjax>.
Proof is analogical:</p>
<p><mathjax>$$p_k = \frac {w_k} {\sum_{i=1}^k w_i} \times \frac {\sum_{i=1}^k w_i} {\sum_{i=1}^{k+1} w_i} 
\times \cdots \times \frac {\sum_{i=1}^{n-2} w_i} {\sum_{i=1}^{n-1} w_i} \times \frac {\sum_{i=1}^{n-1} w_i} {\sum_{i=1}^{n} w_i} = \frac {w_k} {\sum_{i=1}^n w_i}$$</mathjax></p>
<p>Codes in Python:</p>
<div class="codehilite"><pre><span class="k">def</span> <span class="nf">weightedChoice</span><span class="p">(</span><span class="n">items</span><span class="p">,</span> <span class="n">weights</span><span class="p">):</span>
    <span class="n">selection</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="n">total_weight</span> <span class="o">=</span> <span class="mf">0.0</span>
    <span class="k">for</span> <span class="n">item</span><span class="p">,</span> <span class="n">weight</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">items</span><span class="p">,</span> <span class="n">weights</span><span class="p">):</span>
        <span class="n">total_weight</span> <span class="o">+=</span> <span class="n">weight</span>
        <span class="k">if</span> <span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">()</span> <span class="o">*</span> <span class="n">total_weight</span> <span class="o">&lt;</span> <span class="n">weight</span><span class="p">:</span>
            <span class="n">selection</span> <span class="o">=</span> <span class="n">item</span>
    <span class="k">return</span> <span class="n">selection</span>
</pre></div>


<p>There is another amazing method to do this weighted random sampling:
For each item, get a random <mathjax>$r_i \in [0, 1]$</mathjax>,
and <em>reweight</em> this item as <mathjax>$w'_i = r_i^{1 / {w_i}}$</mathjax>.
Then we can select the one with the top new weight. Proof of this is a bit annoying.</p>
<p>If we choose the <mathjax>$i$</mathjax>-th item at last, this means <mathjax>$\forall j\neq i, w'_j &lt;w'_i$</mathjax>. As <mathjax>$r_i \in [0, 1]$</mathjax>, the probability is:</p>
<p><mathjax>$$ p_i = \int_0^1 p(\forall j\neq i, w'_j &lt;w'_i)\ \mathrm{d}\ r_i $$</mathjax></p>
<p><mathjax>$r_j$</mathjax> is independent with each other. So:</p>
<p><mathjax>$$ p_i = \int_0^1 \prod_{j \neq i} p(w'_j &lt;w'_i)\ \mathrm{d} \ r_i $$</mathjax></p>
<p>As <mathjax>$r_j \in [0, 1]$</mathjax>, the inner probability can be simplified as:</p>
<p><mathjax>$$ p(w'_j &lt;w'_i) = p(r_j^{1 / w_j} &lt; r_i^{1 / w_i}) = p(r_j &lt; r_i^{w_j / w_i}) = r_i^{w_j / w_i} $$</mathjax></p>
<p>So:</p>
<p><mathjax>$$ p_i = \int_0^1 \prod_{j \neq i} r_i^{w_j / w_i}\ \mathrm{d}\ r_i
= \int_0^1 r_i^{(w-w_i) / w_i}\ \mathrm{d}\ r_i = \frac {w_i} w $$</mathjax></p>
<p>Same as our expectation.</p>
<p>This blog is basically a summary of
<a href="http://www.gocalf.com/blog/random-selection.html">these</a>
<a href="http://www.gocalf.com/blog/weighted-random-selection.html">three</a>
<a href="http://www.gocalf.com/blog/weighted-random-selection-2.html">blogs</a>.
Refer to them for more content.</p>
]]> </content>
  </entry>
</feed>
